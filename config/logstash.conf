input {
#   s3 {
#     access_key_id => ""
#     secret_access_key => ""
#     bucket => ""
#     region => "eu-west-2"
#     prefix => ""
#     id => "alb-logs"
#     tags => [ 'alb-logs' ]
#     interval => 30
#     sincedb_path => "log_sincedb"
#   }
  tcp {
    port => 9000
  }
}


filter {

    grok {
       match => ["message", "^%{WORD:protocol} %{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"%{DATA:userAgent}\"( %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})? %{NOTSPACE:target_group_arn} \"%{NOTSPACE:trace_id}\" \"%{NOTSPACE:sni_domain_name}\" \"%{NOTSPACE:chosen_cert_arn}\" %{NUMBER:matched_rule_priority:int}( %{GREEDYDATA:ignored_fields})?$"]
    }

    grok {
      match => ["request", "%{URIPROTO:http_protocol}"]
    }

    if [request] != "-" {
      grok {
        match => ["request", "(?<request>[^?]*)"]
        overwrite => ["request"]
      }
    }

    # the default logstash-YYYY.MM.DD index has an ES mapping for the geopoint data reference.
    geoip {
      source => "client_ip"
      target => "geoip"
      add_tag => ["geoip"]
    }

    useragent {
      source => "userAgent"
    }

    date {
      match => ["timestamp", "ISO8601"]
    }

}

output {
  elasticsearch {
    hosts    => [ 'elasticsearch' ]
    user     => 'elastic'
    password => 'changeme'
    index    => 'elb-logs-%{+yyyy.MM.dd}'
  }
  stdout {
    codec => json
  }
}
